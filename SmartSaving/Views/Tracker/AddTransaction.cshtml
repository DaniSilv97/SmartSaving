@model SmartSaving.Models.Transaction
@{
    ViewBag.Title = "Add Transaction";
    Layout = "_Layout";
}

<div class="max-w-2xl mx-auto py-8">
    <!-- Header -->
    <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900">Add Transaction</h1>
        <p class="text-gray-600 mt-2">Add a new income or expense to tracker for @ViewBag.TrackerDate</p>
    </div>

    <!-- Form Card -->
    <div class="bg-white shadow-lg rounded-lg p-8">
        <form action="@Url.Action("AddTransaction", "Tracker", new { trackerId = ViewBag.TrackerId })" method="post" class="space-y-6">
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.GuidTracker)

            <!-- Transaction Type -->
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-3">Transaction Type</label>
                <div class="grid grid-cols-2 gap-4">
                    <label class="relative">
                        @Html.RadioButtonFor(m => m.TransactionType, SmartSaving.Models.Transaction.TransactionTypes.Income, new {
                                @class = "sr-only peer",
                                id = "income-radio"
                            })
                        <div class="w-full p-4 border-2 border-gray-300 rounded-lg cursor-pointer peer-checked:border-green-500 peer-checked:bg-green-50 hover:bg-gray-50 transition-all duration-200">
                            <div class="flex items-center justify-center">
                                <svg class="w-8 h-8 text-green-500 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 11l5-5m0 0l5 5m-5-5v12"></path>
                                </svg>
                                <div>
                                    <p class="font-medium text-gray-900">Income</p>
                                    <p class="text-sm text-gray-600">Money received</p>
                                </div>
                            </div>
                        </div>
                    </label>

                    <label class="relative">
                        @Html.RadioButtonFor(m => m.TransactionType, SmartSaving.Models.Transaction.TransactionTypes.Expense, new {
                                @class = "sr-only peer",
                                id = "expense-radio"
                            })
                        <div class="w-full p-4 border-2 border-gray-300 rounded-lg cursor-pointer peer-checked:border-red-500 peer-checked:bg-red-50 hover:bg-gray-50 transition-all duration-200">
                            <div class="flex items-center justify-center">
                                <svg class="w-8 h-8 text-red-500 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 13l-5 5m0 0l-5-5m5 5V6"></path>
                                </svg>
                                <div>
                                    <p class="font-medium text-gray-900">Expense</p>
                                    <p class="text-sm text-gray-600">Money spent</p>
                                </div>
                            </div>
                        </div>
                    </label>
                </div>
                @Html.ValidationMessageFor(m => m.TransactionType, "", new { @class = "text-red-600 text-sm mt-1" })
            </div>

            <!-- Amount -->
            <div>
                <label for="Value" class="block text-sm font-medium text-gray-700 mb-2">
                    Amount (€)
                </label>
                <div class="mt-1 relative">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <span class="text-gray-500 sm:text-sm">€</span>
                    </div>
                    @Html.TextBoxFor(m => m.Value, new {
                            @class = "block w-full pl-8 pr-12 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm",
                            type = "number",
                            step = "0.01",
                            min = "0",
                            placeholder = "0.00",
                            required = "required"
                        })
                </div>
                @Html.ValidationMessageFor(m => m.Value, "", new { @class = "text-red-600 text-sm mt-1" })
            </div>

            <!-- Date -->
            <div>
                <label for="Date" class="block text-sm font-medium text-gray-700 mb-2">
                    Transaction Date
                </label>
                <div class="mt-1">
                    @Html.TextBoxFor(m => m.Date, new {
                            @class = "block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm",
                            type = "datetime-local",
                            required = "required"
                        })
                    @Html.ValidationMessageFor(m => m.Date, "", new { @class = "text-red-600 text-sm mt-1" })
                </div>
                <p class="mt-1 text-xs text-gray-500">
                    When did this transaction occur?
                </p>
            </div>

            <!-- Description (Optional) -->
            <div>
                <label for="Description" class="block text-sm font-medium text-gray-700 mb-2">
                    Description <span class="text-gray-400">(Optional)</span>
                </label>
                <div class="mt-1">
                    @Html.TextBoxFor(m => m.Description, new {
                            @class = "block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm",
                            placeholder = "Enter a description for this transaction",
                            maxlength = "255"
                        })
                    @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-red-600 text-sm mt-1" })
                </div>
            </div>

            <!-- Quick Amount Buttons -->
            <div class="bg-gray-50 rounded-lg p-4">
                <h3 class="text-sm font-medium text-gray-700 mb-3">Quick Amounts</h3>
                <div class="grid grid-cols-4 gap-2">
                    <button type="button" onclick="setAmount(10)" class="bg-white hover:bg-gray-100 border border-gray-300 text-gray-700 px-3 py-2 rounded text-sm">€10</button>
                    <button type="button" onclick="setAmount(25)" class="bg-white hover:bg-gray-100 border border-gray-300 text-gray-700 px-3 py-2 rounded text-sm">€25</button>
                    <button type="button" onclick="setAmount(50)" class="bg-white hover:bg-gray-100 border border-gray-300 text-gray-700 px-3 py-2 rounded text-sm">€50</button>
                    <button type="button" onclick="setAmount(100)" class="bg-white hover:bg-gray-100 border border-gray-300 text-gray-700 px-3 py-2 rounded text-sm">€100</button>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="flex justify-between pt-6">
                <a href="@Url.Action("Inspect", "Tracker", new { id = ViewBag.TrackerId })"
                   class="bg-gray-300 hover:bg-gray-400 text-gray-700 font-medium py-2 px-4 rounded-md transition duration-150 ease-in-out">
                    Cancel
                </a>
                <button type="submit"
                        class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-6 rounded-md transition duration-150 ease-in-out">
                    Add Transaction
                </button>
            </div>
        </form>
    </div>

    <!-- Help Section -->
    <div class="mt-8 bg-blue-50 border border-blue-200 rounded-lg p-6">
        <div class="flex items-start">
            <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-blue-400" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
                </svg>
            </div>
            <div class="ml-3">
                <h3 class="text-sm font-medium text-blue-800">Tips for Adding Transactions</h3>
                <div class="text-sm text-blue-700 mt-1 space-y-1">
                    <p>• <strong>Income:</strong> Salary, freelance work, gifts, interest, etc.</p>
                    <p>• <strong>Expense:</strong> Food, rent, utilities, entertainment, etc.</p>
                    <p>• Use the description to categorize your transactions</p>
                    <p>• Set the correct date for accurate tracking</p>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function setAmount(amount) {
            document.getElementById('Value').value = amount.toFixed(2);
            document.getElementById('Value').focus();
        }

        document.addEventListener('DOMContentLoaded', function() {
            // Set default date to now
            const dateInput = document.getElementById('Date');
            if (!dateInput.value) {
                const now = new Date();
                const localDateTime = new Date(now.getTime() - now.getTimezoneOffset() * 60000).toISOString().slice(0, 16);
                dateInput.value = localDateTime;
            }

            // Focus on transaction type first
            document.getElementById('income-radio').focus();

            // Auto-focus amount field when type is selected
            const typeRadios = document.querySelectorAll('input[name="TransactionType"]');
            typeRadios.forEach(radio => {
                radio.addEventListener('change', function() {
                    setTimeout(() => {
                        document.getElementById('Value').focus();
                    }, 100);
                });
            });

            // Format amount on blur
            const valueInput = document.getElementById('Value');
            valueInput.addEventListener('blur', function() {
                if (this.value && !isNaN(this.value)) {
                    this.value = parseFloat(this.value).toFixed(2);
                }
            });
        });
    </script>
}